{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Modal","props","className","글제목","누른제목","App","useState","글제목변경","누른제목변경","좋아요","좋아요변경","modal","modal변경","입력","입력변경","onClick","newArry","sort","console","log","nsort","map","글","i","list","copy좋아요","onChange","e","target","value","arrayCopy","unshift","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA+FA,SAASA,EAAOC,GACZ,OACE,sBAAKC,UAAY,QAAjB,UACQ,iDAAUD,EAAME,mBAAKF,EAAMG,0BAA3B,OACA,2DACA,8DAKCC,MApGf,WAAgB,IAAD,EACWC,mBAAU,CAAC,qBAAM,iCAAQ,uBADpC,mBACRH,EADQ,KACAI,EADA,OAESD,mBAAS,GAFlB,mBAERF,EAFQ,KAEDI,EAFC,OAIWF,mBAAU,CAAC,IAJtB,mBAIRG,EAJQ,KAIAC,EAJA,OAKaJ,mBAAW,CAAC,SAAK,WAL9B,gCAMgBA,oBAAU,IAN1B,mBAMRK,EANQ,KAMGC,EANH,OAOaN,mBAAU,IAPvB,mBAORO,EAPQ,KAOCC,EAPD,KA4Bb,OACI,sBAAKZ,UAAU,MAAf,UAEI,qBAAKA,UAAW,cAAhB,SACE,2EAGA,wBAAQa,QAvBlB,WACC,IAAIC,EAAO,YAAOb,GAClBa,EAAQC,OACRC,QAAQC,IAAIH,EAAQ,IACpBT,EAAMS,IAmBG,0BACA,wBAAQD,QAhBlB,WACE,IAAIK,EAAK,YAAMjB,GACfiB,EAAM,GAAI,qBACVF,QAAQC,IAAIC,EAAM,IAClBb,EAAMa,IAYE,0BAEA,8BAGAjB,EAAIkB,KAAI,SAAUC,EAAEC,GACpB,OACE,sBAAKrB,UAAW,OAAhB,UACM,qBAAIa,QAAY,WAAMP,EAAOe,IAA7B,cAAwCD,EACpC,sBAAMP,QAAW,WACf,IAAIS,EAAOD,EACPE,EAAO,YAAOhB,GAClBgB,EAAQD,KACRd,EAAMe,IAJR,0BAMY,+BAAOhB,EAAIc,QAE3B,mEACA,yBAXsBA,QAoBhC,sBAAKrB,UAAU,UAAf,UACI,uBAAOwB,SAAa,SAACC,GAAOb,EAAMa,EAAEC,OAAOC,UAC3C,wBAAQd,QACN,WACE,IAAIe,EAAS,YAAO3B,GACpB2B,EAAUC,QAASlB,GACnBN,EAAMuB,IAJV,6BASJ,wBAAQf,QAAY,WAAMH,GAASD,IAAnC,wCACA,wBAAQI,QAAY,WAAMH,GAAQ,IAAlC,2BAEA,+BAEc,IAAVD,EACE,cAACX,EAAD,CAAOG,qBAAMA,EAAKC,2BAAQA,EAA1B,eACA,WC1ED4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ba004f53.chunk.js","sourcesContent":["\n/* eslint-disable */\nimport React, { useState }  from 'react';\nimport './App.css';\n\nfunction App() {\n  let [글제목 ,   글제목변경  ] = useState( ['노드몬','코아라우터','백앤드']);\n  let [누른제목 , 누른제목변경] = useState(0);\n\n  let [좋아요,    좋아요변경  ] = useState( [0]);\n  let [날자,      날자변경    ] = useState ( ['일', '일'] );\n  let [modal,     modal변경  ] = useState (true)\n  let [입력,      입력변경    ] = useState ('');  \n    \n\n  // 제목바꾸기 와 정렬 두가지 버튼을 동시에 올리고 싶었는데 \n  //  처음의 제목바꾸기만 적용되고 변경함수는 적용되지 않았다\n  function 제목바꾸기 () {\n   var newArry = [...글제목] ;\n   newArry.sort();\n   console.log(newArry[0]);\n   글제목변경(newArry);\n  }\n \n\n  function 글정렬 ()  {  //두번째로 만든 함수는 적용 되지 않는다\n    var nsort =[...글제목];// 글제목의 사본 arrayCopy를 만든다\n    nsort[0]= '스터디';\n    console.log(nsort[0]);\n    글제목변경(nsort);\n  }\n \n\n  return (\n      <div className=\"App\">\n      \n          <div className= \" black-nav \">\n            <div> 즐거운 블로그</div>\n          </div>\n\n            <button onClick = { 제목바꾸기 }>변경</button>\n            <button onClick = { 글정렬 }>정렬</button>\n            \n            <div >\n          \n          {\n            글제목.map(function (글,i) {\n            return (\n              <div className= \"list\" key={i} >\n                    <h5 onClick =  {()=> {누른제목변경(i) } } > { 글 } \n                        <spen onClick= { ()=> {\n                          let list = i; //i는 <span>을 반복문을 돌리고 있을시 반복문에서의 0,1,2 이렇게 증가하는 숫자를 뜻합니다. \n                          let copy좋아요 = [...좋아요];\n                          copy좋아요[list]++;\n                          좋아요변경(copy좋아요);\n                        \n                        }}>🍔</spen><spen>{좋아요[i]}</spen>\n                    </h5>\n                    <p3 > \"12월 13일 발행\"</p3>\n                    <hr/>   \n                               \n              </div>\n              \n          )})}\n          \n          </div>\n\n          \n          <div className=\"publish\" >\n              <input onChange = { (e) => {입력변경 (e.target.value) } } />\n              <button onClick ={ \n                ()=> {\n                  var arrayCopy =[... 글제목]; // 글제목의 사본 arrayCopy를 만든다\n                  arrayCopy.unshift (입력);  // unshift는 array 맨압에 새로운 어레이 자료(입력 state저장된)를 추가해주세요\n                  글제목변경(arrayCopy);\n                } \n              } >저장</button>\n          </div>\n          \n          <button onClick =  {()=> {modal변경(!modal)} } > 열기 닫기</button>\n          <button onClick = { ()=> {modal변경(false)}}> 닫기</button>\n        \n          <div>\n          {\n              modal === true \n              ? <Modal 글제목 ={글제목} 누른제목 = {누른제목}> </Modal>\n              : null\n           }\n          </div>\n\n        </div>\n       );\n    }\n    \n    \nfunction Modal (props) {\n    return (\n      <div className = \"modal\" >\n              <h2> 제목: {props.글제목 [props.누른제목] } </h2>\n              <p> 날자일까 </p>\n              <p> 상세내용 </p>    \n      </div>\n    );\n  }\n \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}